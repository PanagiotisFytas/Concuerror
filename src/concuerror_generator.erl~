%% -*- erlang-indent-level: 2 -*-


-module(concuerror_generator).


%%------------------------------------------------------------------------------

-spec start_process_generator(concuerror_options:options()) -> pid().

start_process_generator(Options) ->
  Parent = self(),
  Fun =
    fun() ->
        ProcessQueue = initialize_generator(Options),
        Parent ! process_gen_ready,
        generator_loop(ProcessQueue)
    end,
  P = spawn_link(Fun),
  receive
    process_gen_ready -> P
  end.

initialize_generator(Options) ->
  TotalProcesses = ?opt(number_of_processes, Options),
  Fun = fun() -> idle_process() end,
  AvailableProcesses = [spawn(Fun) || _ <- lists:seq(1, TotalProcesses)],
  queue:from_list(AvailableProcesses).

idle_process() ->
  receive
    {wakeup, Info} ->
      process_top_loop(Info)
  end.

generator_loop(ProcessQueue) ->
  receive
    {Scheduler, get_new_process, Info} ->
      case queue:out(ProcessQueue) of
	{empty, ProcessQueue} ->
	  Scheduler ! process_limit_exceeded,
	  generator_loop(ProcessQueue);
	{{value, Process}, NewProcessQueue} ->
	  Process ! {wakeup, Info},
	  Scheduler ! {new_process, Process},
	  generator_loop(NewProcessQueue)
      end;
    {Pid, cleanup} ->
      _ = [exit(IdleProcess, kill) || IdleProcess <- queue:to_list(ProcessQueue)],
      Pid ! done
  end.

-spec stop_process_generator(pid()) -> ok.

stop_process_generator(ProcessGenerator) ->
  ProcessGenerator ! {self(), cleanup},
  receive
    done ->
      ok
  end.
